<powershell>
#### This script from <powershell> to <powershell> is an UserData script that can be run on new instances(already setup on current ORG AMIs)(set password in script first) ###
### This script configures a server for usage with AWS custom CloudWatch metrics.  It creates scheduled tasks to run the custom metrics script on a schedule. ###
### Setting Admin Password (replace ${admin_password} with desired password)(delete from script if you don't want to change password) ###
netsh advfirewall firewall add rule name="WinRM in" protocol=TCP dir=in profile=any localport=5985 remoteip=any localip=any action=allow
$admin = [adsi]("WinNT://./administrator, user")
$admin.psbase.invoke("SetPassword", "${admin_password}")

# Set Execution Policy
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force

# Install AWS Powershell Module
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
Install-Module AWSPowershell -Force

### Create scheduled task for custom CloudWatch metrics
$path = "C:\Scripts\GPUStats.ps1" # Specify path to cloudwatch custom metric script
$taskName = 'AWSCloudWatchCustomMetrics' 
$description = 'Scheduled task for custom CloudWatch metrics' 
$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument "-File `"$path`""
$principal = New-ScheduledTaskPrincipal -UserID "Administrator" -LogonType S4U -RunLevel Highest 
$trigger =  New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5)
$settings = New-ScheduledTaskSettingsSet -ExecutionTimeLimit (New-TimeSpan -Minutes 5)
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName $taskName -Description $description -Settings $settings -Principal $principal

# Start AWSCloudWatch task
Start-ScheduledTask -TaskName $taskName

# Create scheduled task for starting AWSCloudWatch task on startup
$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-Command "Start-ScheduledTask -TaskName $taskName'
$trigger = New-ScheduledTaskTrigger -AtStartup
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "AWSCloudWatchInit" -Description "Starts indefinite repetition of AWSCloudWatch task"

### Above sets Admin Password and creates Task Schedulers to run below code ###
### Below code pulls custom and NVIDIA GPU metrics, creates CloudWatch metrics and pushes to AWS ###
mkdir C:\Scripts 
New-Item C:\Scripts\GPUStats.ps1
Set-Content C:\Scripts\GPUStats.ps1 -Value @' 
#Get Stats from NVIDIA-SMI 
$STATS = & 'C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe' --query-gpu=memory.used,utilization.gpu,utilization.memory,encoder.stats.averageLatency --format=csv,nounits
#Convert to PS Object 
$object = ConvertFrom-Csv -InputObject $STATS -Delimiter ','

$DISPLAY = & 'C:\Program Files\NVIDIA Corporation\NVSMI\nvidia-smi.exe' --query-gpu=display_active --format=csv,nounits 
$object2 = $DISPLAY | Foreach {
    if ( $DISPLAY -like '*Disabled'){ $DISPLAY -replace "Disabled", "0" }
    else { $DISPLAY -replace "*Enabled", "1" }
}
$object2 = ConvertFrom-Csv -InputObject $object2 -Delimiter ','
$object2 = echo $object2[0]

### This script creates custom CloudWatch metrics in AWS and sends metric data ###
# Fill $param, $namespace, and $instanceID with the proper values #
Import-Module AWSPowerShell
$instanceID = Get-EC2InstanceMetadata -Path '/instance-id'
 
# GPU Metrics
$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="GPUMemoryUsed"
$dat.Value=$object.'memory.used [MiB]'
$dat.Unit="Megabytes"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="GPUUtilization"
$dat.Value=$object.'utilization.gpu [%]'
$dat.Unit="Percent"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="GPUMemoryUtilization"
$dat.Value="$($object.'utilization.memory [%]')"
$dat.Unit="Percent"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="DisplayActive"
$dat.Value=$object2.'display_active'
$dat.Unit="None"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

$dat = New-Object Amazon.CloudWatch.Model.MetricDatum
$dat.Timestamp=(Get-Date).ToUniversalTime()
$dat.MetricName="GPULatency"
$dat.Value="$($object.'encoder.stats.averageLatency')"
$dat.Unit="Microseconds"
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$dat.Dimensions=$dim
Write-CWMetricData -Namespace "GPUStats" -MetricData $dat -Verbose

# Memory
$ram = [math]::Round((Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty TotalVisibleMemorySize)/1MB, 2)
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Total Memory"
$data.Unit = "Gigabytes"
$data.Value = "$($ram)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
     
$free = [math]::Round((Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty FreePhysicalMemory)/1MB, 2)
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Free Memory"
$data.Unit = "Gigabytes"
$data.Value = "$($free)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
$data = New-Object Amazon.CloudWatch.Model.MetricDatum
$dim = New-Object Amazon.CloudWatch.Model.Dimension
$dim.Name = "InstanceID"
$dim.Value = $instanceID
$data.Dimensions = $dim
$data.Timestamp = (Get-Date).ToUniversalTime()
$data.MetricName = "Memory Usage"
$data.Unit = "Percent"
$data.Value = "$((($ram - $free) / $ram) * 100)"
Write-CWMetricData -Namespace "CustomMetrics" -MetricData $data -Verbose
 
echo $object 
exit 
'@
</powershell>